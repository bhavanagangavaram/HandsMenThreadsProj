trigger StockDeductionTrigger on HandsMen_Order__c (after insert, after update) {
    Set<Id> productIds = new Set<Id>();

    for (HandsMen_Order__c order : Trigger.new) {
        if (order.Status__c == 'Confirmed' && order.HandsMen_Product__c != null) {
            productIds.add(order.HandsMen_Product__c);
        }
    }

    if (productIds.isEmpty()) return;

    // Query related inventories based on product
    Map<Id, Inventory__c> inventoryMap = new Map<Id, Inventory__c>(
        [SELECT Id, Stock_Quantity__c, HandsMen_Product__c 
         FROM Inventory__c 
         WHERE HandsMen_Product__c IN :productIds]
    );

    List<Inventory__c> inventoriesToUpdate = new List<Inventory__c>();

    for (HandsMen_Order__c order : Trigger.new) {
        if (order.Status__c == 'Confirmed' && order.HandsMen_Product__c != null) {
            for (Inventory__c inv : inventoryMap.values()) {
                if (inv.HandsMen_Product__c == order.HandsMen_Product__c) {
                    // Ensure the stock quantity doesn't go negative
                    Decimal newStockQuantity = inv.Stock_Quantity__c - order.Quantity__c;
                    if (newStockQuantity >= 0) {
                        inv.Stock_Quantity__c = newStockQuantity;
                        inventoriesToUpdate.add(inv);
                    } else {
                        // Handle case when stock is insufficient, maybe log or handle it gracefully
                        // e.g., Adding a message to notify about insufficient stock
                        System.debug('Insufficient stock for product ' + order.HandsMen_Product__c);
                    }
                    break;
                }
            }
        }
    }

    if (!inventoriesToUpdate.isEmpty()) {
        update inventoriesToUpdate;
    }
}